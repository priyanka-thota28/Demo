we calculate time complexity based on length of algorithm.
-------------------------
SPACE & TIME COMPLEXITIES
-------------------------
The time complexity of an algorithm quantifies the amount of time taken by an algorithm to run as a function of the length of the input.

The space complexity of an algorithm quantifies the amount of space taken by an algorithm to run as a function of length of the input

-----------------------------------
INTRODUCTION TO ASYMPTOTIC ANALYSIS
-----------------------------------
In asymptotic analysis,we evaluate the performance of an algorithm in terms of input size(we don't measure the actual running time).

we calculate how the time (or space) taken by an algorithm increases
with the input size

EX:
for(int i=0;i<n;i++)
	for(int j=0;j<n;j++)
		if(i!=j && a[i]==z)
	return true
return false


-> Assuming that each of the operations in the computer takes    approximately constant time,let it be c.
-> The number of lines of code executed actually depends on the value    of z.
-> During analysis of the algorithm,mostly the worst-case scenario is    considered, i.e,when there is no pair of elements with sum equals    Z. In the worst case,
-> N*c operations are required for input.
-> The outer loop j loop runs N times.
-> For each i, the inner loop j loop runs N times.
-> so total execution time is N*c + N*N*c + c
-> Now ignore the lower order terms since the lower order terms are      relatively insignificant for large input, therefore only the       highest order term is taken(without constant) which is N*N in this    case.
-> Hence, the time complexity is O(N2) for the above algorithm



EX:
count=0
for(int i=N;i>0;i/=2)
	for(int j=0;j<ilj++)
		count++;

-> This is a tricky case.
-> In the first look, it seems like the complexity is O(N*logN).
-> N for the j's loop and logN for i's loop.
-> But it's wrong. Let's see why.
-> Think about how many times count++ will run.
-> When i=N ,it will run N times.
-> When i=N/2, it will run N/2 times.
-> When i=N/4, it will run N/4 times.




